import java.util.Stack;

public class Solver {
	private Stack<Board> sulotionBoards;
	private boolean solvability;
	private int movNumber;
	private Board goal;

	private class SearchNode implements Comparable<SearchNode> {
		Board board;
		int steps;
		int priority;
		SearchNode previous;
		
		public SearchNode(Board board, int steps, SearchNode previous) {
			// TODO Auto-generated constructor stub
			this.board = board;
			this.steps = steps;
			this.previous = previous;
			this.priority = board.manhattan() + steps;
		}
		
		@Override
		public int compareTo(SearchNode o) {
			// TODO Auto-generated method stub
			return this.priority - o.priority;
		}
		
	}
	
	
	public Solver(Board initial) {
		// TODO Auto-generated constructor stub
		if (initial == null)
			throw new NullPointerException();
		int dim = initial.dimension();
		int[][] aux = new int[dim][dim];
		for (int i = 0; i < dim; i++)
			for (int j = 0; j < dim; j++)
				aux[i][j] = i * dim + j + 1;
		aux[dim-1][dim-1] = 0;
		goal = new Board(aux);
		Board twinBoard = initial.twin();
		MinPQ<SearchNode> pq1 = new MinPQ<SearchNode>();
		MinPQ<SearchNode> pq2 = new MinPQ<SearchNode>();
		pq1.insert(new SearchNode(initial, 0, null));
		pq2.insert(new SearchNode(twinBoard, 0, null));
		
		Board ansBoard;
		while (true) {
			SearchNode node1 = pq1.delMin();
			SearchNode node2 = pq2.delMin();
			if (node1.board.equals(goal)) {
				solvability = true;
				ansBoard = node1.board;
				movNumber = node1.steps;
			}
				
		}
	}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
	}

}
