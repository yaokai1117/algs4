/******************
 * 
 * Author: yaokai
 * Written: 1/27/2015
 * Last updated: 1/27/2015
 * 
 * Compilation:	javac Percolation.java
 * Execution:	java Percolation
 *  
 */


public class Percolation {

	private int N;					//the size of grid is N-by-N
	private boolean [] OpenState;	//record if one site is open
	private boolean [] VisualSite;	//VisualSite to determine if this system percolates
	private WeightedQuickUnionUF uf;	//Unio-Find 
	
	/**
	 * create N-by-N grid, with all sites blocked
	 * @param N
	 */
	public Percolation(int N){
		OpenState = new boolean[N * N ];
		VisualSite = new boolean[N];
		uf = new WeightedQuickUnionUF(N * N + N);
		for (int i = 0; i < VisualSite.length; i++) {
			uf.union(0, i);
			uf.union(N * N, N * N + i);
		}
	}
	
	/**
	 * is site (row i, column j) open?
	 * @param i
	 * @param j
	 * @return
	 */
	public boolean isOpen(int i, int j) {
		checkIndices(i, j);
		return OpenState[xyTo1D(i, j)];
	}
	
	/**
	 *  open site (row i, column j) if it is not open already
	 * @param i
	 * @param j
	 */
	public void open(int i, int j) {
		checkIndices(i, j);
		int position = xyTo1D(i, j);
		int [] neighbor = new int[4];
		neighbor[0] = xyTo1D(i - 1, j);
		neighbor[1] = xyTo1D(i, j + 1);
		neighbor[2] = xyTo1D(i + 1, j);
		neighbor[3] = xyTo1D(i - 1, j);
		for (int k = 0; k < neighbor.length; k++) {
			if(neighbor[k] >= 0){
				
			}
		}
	}
	
	/**
	 * map 2D coordinates to 1D coordinates
	 * @param x
	 * @param y
	 * @param N
	 * @return
	 */
	private int xyTo1D(int i, int j) {
		if(i < 1 || j > N || j < 1 || j > N)
			return -1;
		else
			return (i - 1) * N + j - 1;
	}
	
	/**
	 * check if indices are from 1 to N
	 * @param i
	 * @param j
	 * @return
	 */
	private void checkIndices(int i, int j) {
		if(i < 1 || i > N || j < 1 || j > N)
			throw new IndexOutOfBoundsException("row index i out of bounds");
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
